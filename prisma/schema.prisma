// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id                  Int        @id @default(autoincrement())
  nickname            String
  group_name          String
  description         String
  password            String
  image               Image[]    
  tags                Tags[]
  goal_rep            Int
  discord_webhook_url String
  discord_server_url  String
  badge               badge?
  user_count          Int        @default(0)
  like_count          Int        @default(0)
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  owner               Owner      @relation(fields: [owner_id], references: [id]) 
  owner_id            Int        @unique
  participants        User[]     
  record              Record[]
}

enum badge {
  PARTICIPANT
  RECORD
  LIKECOUNT
}


model Owner {
  id                 Int       @id @default(autoincrement())
  group              Group?     
  group_id           Int       @unique
  nickname           String
  password           String
  record             Record[] 
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}


model User {
  id                 Int       @id @default(autoincrement())
  group              Group?    @relation(fields: [group_id], references: [id])
  group_id           Int?
  nickname           String
  password           String
  record             Record[]
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model Record {
  id            Int           @id @default(autoincrement())
  nickname      String
  exercise_type exercise_type
  description   String
  time          Int
  distance      Float
  images        Image[]
  createdAt     DateTime      @default(now())
  password      String
  user          User          @relation(fields: [user_id], references: [id])
  user_id       Int
  group         Group         @relation(fields: [group_id], references: [id])
  group_id      Int
  owner         Owner         @relation(fields: [owner_id], references: [id])
  owner_id      Int
}

enum exercise_type {
  RUNNING
  CYCLE
  SWIMMING
}

model Image {
  id         Int      @id @default(autoincrement())
  name       String
  path       String
  uploadedAt DateTime @default(now())
  group      Group?   @relation(fields: [group_id], references: [id])
  group_id   Int?
  record     Record?  @relation(fields: [record_id], references: [id])
  record_id  Int?
}

model Tags {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  group      Group    @relation(fields: [group_id], references: [id])
  group_id   Int
}
